package ARManalyzers;

import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JOptionPane;

/**************************************************************************
****************************CODIGO DE ACCION*******************************
***************************************************************************/

action code {:
    /*Hay que poner las instancias de las memorias*/
:}

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
        JOptionPane.showMessageDialog(null,m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public static void main(String[] args){
        try {
            parser asin = new parser(
                    new LexicalAnalyzer( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** FINAL RESULTS ***");

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};


/**************************************************************************
********************************TERMINALES*********************************
***************************************************************************/

terminal   AND, EOR, SUB , RSB , ADD , ADC , SBC , RSC , CMP , 
           CMN , ORR , MOV , LSL , ASR , RRX , ROR , BIC, MVN,
           MUL , MLA, STR, LDR, STRB, LDRB, B, BL;

terminal REGISTER, COMA, SEMICOLON, TEXT, NEWLINE, OPENBRACKET,
         CLOSEBRACKET, NUMBER, ADDRESS;


/**************************************************************************
******************************NO TERMINALES********************************
***************************************************************************/

non terminal Object Program, Instruction, Instructions, InstructionsAux;

start with Program;

/**************************************************************************
*********************************GRAMATICA*********************************
***************************************************************************/

Program::= Instructions
                    {: 
                    :}
                    ;

Instructions::= Instruction InstructionsAux
                    {:
                    :}
                    ;

InstructionsAux::= Instruction InstructionsAux 
                    {:
                    :}
                    | /*NOTHING*/
                    {:
                    :}
                    ;


Instruction::= 

                TEXT:a 
                                {:
                                    System.out.println("Label: " + a);
                                :}

              | ADD REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " + " + c);
                                :}
              | SUB REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " - " + c);
                                :}
              | AND REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " & " + c);
                                :}
              | ORR REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " | " + c);
                                :}   
              | EOR REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " XOR " + c);
                                :}     
              | BIC REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " &~ " + c);
                                :}   
              | MUL REGISTER:a COMA REGISTER:b COMA REGISTER:c 
                                {:
                                    System.out.println(a + " = " + b + " x " + c);
                                :}  
              | LSL REGISTER:a COMA REGISTER:b COMA NUMBER:c 
                                {:
                                    System.out.println("LSL "+a+","+b+","+c);
                                :} 
              | ASR  REGISTER:a COMA REGISTER:b COMA NUMBER:c 
                                {:
                                    System.out.println("ASR "+a+","+b+","+c);
                                :}  
              | ROR  REGISTER:a COMA REGISTER:b COMA NUMBER:c 
                                {:
                                    System.out.println("ROR "+a+","+b+","+c);
                                :} 
              | MOV  REGISTER:a COMA NUMBER:b 
                                {:
                                    System.out.println("MOV "+a+","+b);
                                :} 
              | MOV  REGISTER:a COMA ADDRESS:b 
                                {:
                                    System.out.println("MOV "+a+","+b);
                                :} 
              | MOV  REGISTER:a COMA REGISTER:b 
                                {:
                                    System.out.println("MOV "+a+","+b);
                                :}
              | CMP  REGISTER:a COMA REGISTER:b 
                                {:
                                    System.out.println("CMP "+a+","+b);
                                :} 
              | LDR  REGISTER:a COMA OPENBRACKET REGISTER:b COMA NUMBER:c CLOSEBRACKET
                                {:
                                    System.out.println("LDR "+a+",["+b+","+c+"]");
                                :}   
              | STR  REGISTER:a COMA OPENBRACKET REGISTER:b COMA ADDRESS:c CLOSEBRACKET
                                {:
                                    System.out.println("STR "+a+",["+b+","+c+"]");
                                :}      
              | LDRB  REGISTER:a COMA OPENBRACKET REGISTER:b COMA REGISTER:c CLOSEBRACKET
                                {:
                                    System.out.println("LDRB "+a+",["+b+","+c+"]");
                                :} 
              | STRB  REGISTER:a COMA OPENBRACKET REGISTER:b COMA REGISTER:c CLOSEBRACKET
                                {:
                                    System.out.println("STRB "+a+",["+b+","+c+"]");
                                :}                      
              | NEWLINE
              | SEMICOLON TEXT
              ;
                                
                

