package proyecto1_arqui1_gui;

import javax.swing.JOptionPane;
import FileManager.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.KeyStroke;

/**
 *
 * @author Daniel
 */
public class mainWindow extends javax.swing.JFrame {
    private String _actualPath; //indica el path del archivo que actualmente está trabajando
    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        this._actualPath = "";
        initComponents();
    }
    
    private void guardarComoFileChooser(String textoAGuardar)
    {
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar como...");
        int userSelection = fileChooser.showSaveDialog(parentFrame);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            //System.out.println("Save as file: " + fileToSave.getAbsolutePath());
            this._actualPath = fileToSave.getAbsolutePath();
            if(!File_TXT.verifyFilenameExists(fileToSave.getAbsolutePath())){
                try {
                    File_TXT.writeText(fileToSave.getAbsolutePath(), textoAGuardar);
                    JOptionPane.showMessageDialog(this, "¡Archivo guardado"
                  + " con éxito!", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "¡Ya existe archivo "
                  + "con ese nombre!",
                "Guardar como", JOptionPane.WARNING_MESSAGE);
            }
        }
    }// fin del método
    
    private void guardarSinFileChooser(String textoAGuardar)
    {
        try {
            File_TXT.writeText(this._actualPath, textoAGuardar);
        } catch (IOException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
            JOptionPane.showMessageDialog(this, "¡Archivo actualizado y"
                    + " guardado!", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
    
    }// fin del método
    
    private void cargarFileChooser()
    {
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Abrir...");
        String texto = "";
        int userSelection = fileChooser.showOpenDialog(parentFrame);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToLoad = fileChooser.getSelectedFile();
            this._actualPath = fileToLoad.getAbsolutePath();
            System.out.println("Load file: " + fileToLoad.getAbsolutePath());
            try {
                if(fileToLoad.getAbsolutePath().endsWith(".armv4"))
                    texto = File_TXT.readText(fileToLoad.getAbsolutePath());
                else{
                    JOptionPane.showMessageDialog(this, "¡Formato de archivo"
                  + " no es compatible!",
                "Cargar", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }    
        }
        editorTextPane.setText(texto);
    }// fin del método
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        LBL_virtualMemory = new javax.swing.JLabel();
        LBL_editor = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        editorTextPane = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        LBL_fondo = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem9.setText("jMenuItem9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARMv4 Compiler");
        setBackground(new java.awt.Color(0, 0, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        LBL_virtualMemory.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        LBL_virtualMemory.setForeground(new java.awt.Color(255, 255, 255));
        LBL_virtualMemory.setText("Virtual Memory");

        LBL_editor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        LBL_editor.setForeground(new java.awt.Color(255, 255, 255));
        LBL_editor.setText("Editor");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"R0", null},
                {"R1", null},
                {"R2", null},
                {"R3", null},
                {"R4", null},
                {"R5", null},
                {"R6", null},
                {"R7", null},
                {"R8", null},
                {"R9", null},
                {"R10", null},
                {"R11", null},
                {"R12", null},
                {"R13 (SP)", null},
                {"R14 (LR)", null},
                {"R15 (PC)", null}
            },
            new String [] {
                "Register", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int col) {
                if ( col == 1) {
                    return true;
                } else {
                    return false;
                }
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane1.addTab("Registers", jScrollPane2);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0x00", null},
                {"0x04", null},
                {"0x08", null},
                {"0x0C", null},
                {"0x10", null},
                {"0x14", null},
                {"0x18", null},
                {"0x1C", null},
                {"0x20", null},
                {"0x24", null},
                {"0x28", null},
                {"0x2C", null},
                {"0x30", null},
                {"0x34", null},
                {"0x38", null},
                {"0x3C", null},
                {"0x40", null},
                {"0x44", null},
                {"0x48", null},
                {"0x4C", null},
                {"0x50", null},
                {"0x54", null},
                {"0x58", null},
                {"0x5C", null},
                {"0x60", null},
                {"0x64", null},
                {"0x68", null},
                {"0x6C", null},
                {"0x70", null},
                {"0x74", null},
                {"0x78", null}
            },
            new String [] {
                "Data", "Value"
            }
        )

        {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int col) {
                if ( col == 1) {
                    return true;
                } else {
                    return false;
                }
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable2);

        jTabbedPane1.addTab("Data", jScrollPane3);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0x00", null},
                {"0x04", null},
                {"0x08", null},
                {"0x0C", null},
                {"0x10", null},
                {"0x14", null},
                {"0x18", null},
                {"0x1C", null},
                {"0x20", null},
                {"0x24", null},
                {"0x28", null},
                {"0x2C", null},
                {"0x30", null},
                {"0x34", null},
                {"0x38", null},
                {"0x3C", null},
                {"0x40", null},
                {"0x44", null},
                {"0x48", null},
                {"0x4C", null},
                {"0x50", null},
                {"0x54", null},
                {"0x58", null},
                {"0x5C", null},
                {"0x60", null},
                {"0x64", null},
                {"0x68", null},
                {"0x6C", null},
                {"0x70", null},
                {"0x74", null},
                {"0x78", null}
            },
            new String [] {
                "Address", "Instruction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int col) {
                if ( col == 1) {
                    return true;
                } else {
                    return false;
                }
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable3);

        jTabbedPane1.addTab("Instructions", jScrollPane4);

        editorTextPane.setEditorKit(new javax.swing.text.StyledEditorKit());
        editorTextPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane5.setViewportView(editorTextPane);
        TextLineNumber tln = new TextLineNumber( editorTextPane );
        TextWordsColor twc = new TextWordsColor(editorTextPane);
        LinePainter painter = new LinePainter(editorTextPane);
        jScrollPane5.setRowHeaderView( tln );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText(MessageInterpreter.mensaje());
        jScrollPane1.setViewportView(jTextArea1);

        LBL_fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto1_arqui1_gui/fondo2.jpg"))); // NOI18N

        jMenu2.setMnemonic(KeyEvent.VK_N);
        jMenu2.setText("Archivo");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);
        KeyStroke ctrlNKeyStroke = KeyStroke.getKeyStroke("control N");
        jMenuItem1.setAccelerator(ctrlNKeyStroke);
        jMenu2.add(jSeparator3);

        jMenuItem3.setMnemonic(KeyEvent.VK_O);
        jMenuItem3.setText("Abrir...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);
        KeyStroke ctrlOKeyStroke = KeyStroke.getKeyStroke("control O");
        jMenuItem3.setAccelerator(ctrlOKeyStroke);
        jMenu2.add(jSeparator5);

        jMenuItem2.setText("Guardar como...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);
        KeyStroke ctrlAltSKeyStroke = KeyStroke.getKeyStroke("control alt S");
        jMenuItem2.setAccelerator(ctrlAltSKeyStroke);

        jMenuItem8.setMnemonic(KeyEvent.VK_S);
        jMenuItem8.setText("Guardar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);
        KeyStroke ctrlSKeyStroke = KeyStroke.getKeyStroke("control S");
        jMenuItem8.setAccelerator(ctrlSKeyStroke);
        jMenu2.add(jSeparator4);
        jMenu2.add(jSeparator1);

        jMenuItem10.setText("Cerrar");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);
        KeyStroke ctrlAltQKeyStroke = KeyStroke.getKeyStroke("control alt Q");
        jMenuItem10.setAccelerator(ctrlAltQKeyStroke);

        jMenuItem4.setMnemonic(KeyEvent.VK_Q);
        jMenuItem4.setText("Salir");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);
        KeyStroke ctrlQKeyStroke = KeyStroke.getKeyStroke("control Q");
        jMenuItem4.setAccelerator(ctrlQKeyStroke);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Run");

        jMenuItem5.setText("Go");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);
        KeyStroke ctrlRKeyStroke = KeyStroke.getKeyStroke("control R");
        jMenuItem5.setAccelerator(ctrlRKeyStroke);

        jMenuItem7.setText("Stop");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);
        KeyStroke ctrlTKeyStroke = KeyStroke.getKeyStroke("control T");
        jMenuItem7.setAccelerator(ctrlTKeyStroke);

        jMenuItem6.setText("Assembly");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);
        KeyStroke ctrlAKeyStroke = KeyStroke.getKeyStroke("control A");
        jMenuItem6.setAccelerator(ctrlAKeyStroke);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");

        jMenuItem11.setText("About");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LBL_editor)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LBL_virtualMemory, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(39, 39, 39))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(LBL_fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LBL_editor)
                    .addComponent(LBL_virtualMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(LBL_fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 614, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // METODO NO SE USA
        
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here: Archivo < Nuevo
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea continuar? "
                + "Cambios que no son guardados se borrarán", 
                "Nuevo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (JOptionPane.YES_OPTION == respuesta){
            this.editorTextPane.setText("");
            this._actualPath = "";
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here: Archivo < Guardar como...
        String textoAGuardar = editorTextPane.getText();
        guardarComoFileChooser(textoAGuardar);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here: Archivo < Salir
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea salir? "
                + "Cambios que no son guardados se borrarán", 
                "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (JOptionPane.YES_OPTION == respuesta){
            setVisible(false); //you can't see me!
            dispose(); //Destroy the JFrame object
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here: Run < Go
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here: Archivo < Abrir
        cargarFileChooser();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // NO SE USA METODO
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here: Archivo < Cerrar
        String textoAGuardar = "";
        if (this.editorTextPane.getText().isEmpty() && this._actualPath.isEmpty())
        {
            // El texto está vacío y no se ha abierto ni guardado como...
            this.editorTextPane.setText("");
        }else if(!this.editorTextPane.getText().isEmpty() && this._actualPath.isEmpty())
        {
           // El texto NO está vacío y se ha abierto o guardado como... 
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea guardar "
                + "los cambios?\n"
                + "(Cambios que no son guardados se borrarán)", 
                "Cerrar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (JOptionPane.YES_OPTION == respuesta){
                textoAGuardar = editorTextPane.getText();
                guardarComoFileChooser(textoAGuardar);
                this.editorTextPane.setText("");
            }
        }else 
        {
            textoAGuardar = editorTextPane.getText();
            guardarSinFileChooser(textoAGuardar);
            JOptionPane.showMessageDialog(this, "¡Archivo actualizado y"
                    + " guardado!", "Cerrar", JOptionPane.INFORMATION_MESSAGE);
            this.editorTextPane.setText("");
        }
        
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here: Archivo < Guardar
        if(!this._actualPath.isEmpty())
        {
           // El texto NO está vacío y se ha abierto o guardado como... 
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea actualizar "
                + "los cambios?\n"
                + "(Cambios que no son guardados se borrarán)", 
                "Guardar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            String textoAGuardar = "";
            if (JOptionPane.YES_OPTION == respuesta){
                textoAGuardar = editorTextPane.getText();
                guardarSinFileChooser(textoAGuardar);
            }
        }else{
            String textoAGuardar = "";
            textoAGuardar = editorTextPane.getText();
            guardarComoFileChooser(textoAGuardar);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here: Run < Stop
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here: Run < Assembly
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here: Help < About
        JOptionPane.showMessageDialog(this, MessageInterpreter.aboutMessage()
                , "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LBL_editor;
    private javax.swing.JLabel LBL_fondo;
    private javax.swing.JLabel LBL_virtualMemory;
    private javax.swing.JTextPane editorTextPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    }
